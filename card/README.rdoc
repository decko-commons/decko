
=A Developer's introduction to the Decko/Card code base

New folks should start here after playing with Wagn but before digging into code.

==Intro

===Am I in the right place?

Yes, if:

* <b>you're a Ruby developer</b>, or at least someone who does not fear ruby code. <b>Not a techie? {Try Decko.org}[http://decko.org]</b>
* <b>you've experimented with Decko</b> enough to know the basics (cards, types, rules, etc.) <b>No idea what a card is? {Try Decko.org}[http://decko.org]</b>.
* <b>you're looking at this page from a docs site</b> (ie, NOT GitHub) so you can use our links to navigate code. <b>Links look funny? {Try rubydocs.info}[http://rubydoc.info/gems/card].</b>


===Is Decko an _application_ or a <i>development framework</i>?

It's both.

When you install and seed a new Decko project, you have a working "deck" right away.  Your new application has lots of things built in: account handling, edit histories, default layouts, CSS, etc.

But a newly seeded Deck is just a starting point.  Decko offers a rich framework within which to develop your application into a novel creation, both via configuration (as a "decker") or via code (as a "deck-coder").

<b>Decko is a development framework in which you start <i>in the middle of things</i> rather than from scratch</b>.  Seeding is a bit of a headstart, and it means that designers, developers, and content creators can start working in parallel on day 1. But the seeded cards don't determine what you can build with Wagn; you can add things, you can remove things... In fact, you can build pretty much whatever you want.


===Sets

_Cards_ are the basic building blocks of Decko, and _Sets_ are the basic pattern for organizing cards. Both Deckers and Deck-coders create web systems by applying _rules_ to _sets_ of _cards_.

If you've edited card rules in any deck, you will have encountered Sets. For example, imagine you're on a User card named "Henry Tai", and you decide to edit its structure.  When you edit its rule, you will be prompted to choose the Set of cards to which the rule applies, eg:

* Just "Henry Tai"
* All Users
* All Cards

The Rule in question will apply to all cards in the set you choose.  If a card has rules in more than one set, the rule applied to the narrower set overrides the rule applied to the broader one.

This same general pattern occurs in Decko code: <b>code rules (methods) are organized under the Set of cards to which they apply.</b>


===MoFoS Architecture

Sets are central to Wagn's architecture.  Wagn is not, like Ruby on Rails, an implementation of the "MVC" (Model-View-Controller) architectural pattern.  Instead, we like to think that we're the first instance of a new pattern that we call _MoFoS_.

MoFoS stands for "Model-Formats-Sets": One Model, viewable in many Formats, divisible into Sets.

In Wagn, the MoFoS "one model" is, as you may have guessed, the _card_.

You may have also noticed that you can add .html (the default), .text, .json, etc to any card's web path to receive the card's contents in a different format. This is the Format in MoFos.

The great power of MoFoS, though, is in the Sets. Thanks to Sets, code rules (and data rules) can be as narrow or specific as desired.  These nonorthogonal groupings open up lots of exciting possibilities, and they're a big part of what makes Wagn so much fun.


===Is Decko Ruby on Rails?

Ruby-on-Rails developers reading this will find lots of familiar patterns in Decko, which indeed depends upon rails gems.  <b>Decko is a Rails descendant and owes a ton to the Rails community, but Decko is not Rails</b>.

The main difference is that while Rails' core pattern is adding new things (especially models, views, and controllers), Wagn's core pattern is subdividing exising things into new Sets.

Deck-coders do create lots of views (though they're quite different from Rails views), but we rarely if ever create new controllers or ActiveRecord models.  In the Decko gem there is one controller (CardController) and one main model ({Card}).  Other models optimize the Card model and track its history ({Card::Reference}, {Card::Act}, {Card::Action}, and {Card::Change}).

Decko's equivalent of creating a new model is configuring a new Set of cards. Similarly, instead of creating new actions on controllers, decko-coders create new events that are conditionally triggered for a Set of cards.

Rails experience is definitely a plus for deck-coders, but Decko offers a new architecture, and lot of new possibilities.


==Card Mods

A Card Mod is a discrete piece of Wagn functionality. If you want to customize a Wagn deck in a way that can't be done on the site itself, odds are you want a mod.

The most convenient way to add a mod is in the `mod` directory of your deck, eg:

  /mydeck/mod/mymod

A mod can have several different directories: <i>chunk, format, layout, set, set_pattern, spec, file, and lib</i>. Of these, the set directory is by far the most important.

===Creating a mod with set modules

Set modules are defined in a mod's set directory, eg:

  /mydeck/mod/mymod/set/

For example, if your deck has Company cards, you can extend the behavior of those cards by adding a set module like so:

  /mydeck/mod/mymod/set/type/company.rb

Note that "company" here does not refer to its "name", but rather its "codename" (which an administrator might add to the Company card via the RESTful web API with a url like

  /update/Company?card[codename]=company

Generally speaking, code should never refer to a card by name; otherwise it will break when the card is renamed.  Instead, it should use the codename, which will continue to work even if the canonical name is changed.


The full path of a set module follows this pattern

  [mod dir]/set/[set_pattern](/[anchor])(/[additional]).rb

==....more coming soon!



